apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "com.facebook.react"
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'
// NOTE: Set the `CARGO_BUILD_PROFILE` env var to anything to get a debug build
def cargoBuildProfileEvnVar = System.getenv("CARGO_BUILD_PROFILE")
def cargoProfile = cargoBuildProfileEvnVar != null ? "debug" : "release"

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.ptokenssentinelandroidapp"
    defaultConfig {
        applicationId "com.ptokenssentinelandroidapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    task PreBuild {}
}

preBuild {
    exec {
        // TODO/FIXME check for env vars via script, and if we need the TARGET_CC & _AR ones
        executable "../../scripts/clean-rust-lib.sh" // NOTE: Cleans rust libs before a rebuild.
    }
    dependsOn "cargoBuild"
}

cargo {
    println "[INFO] running 'cargoBuild' task in '$cargoProfile' profile"

    targets = [ "arm64" ]
    profile = cargoProfile
    libname = "strongbox"
    targetIncludes = ['libstrongbox.so']
    targetDirectory = "../../rust/ptokens-core/target"
    module  = "../../rust/ptokens-core/apps/strongbox"
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders')) {
        // NOTE: Require cargo to be run before copying native libraries.
        task.dependsOn 'cargoBuild'
    }
}

dependencies {
    implementation project(path: ':sqlite3')
    implementation("com.facebook.react:react-android")
    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'
    implementation "androidx.sqlite:sqlite:2.3.1"
    implementation "androidx.sqlite:sqlite-framework:2.3.1"
    implementation "commons-codec:commons-codec:1.15"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.14.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion")

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
